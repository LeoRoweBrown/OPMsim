# starting from highest level to lowest level:

simulation_notebooks.py:
- run_opm_sim(objectives, tube_lenses):
	run simulation of opm
- run_dopm_sim(objectives, tube_lenses):
	run simulation of dopm

trace_system.py:
- trace_rays_mp(elements, threads) -> detector: 
	trace rays, populate detector object with rays

optical_elements.py:
- sine_lens(NA, f)
- mirror(angle_x)
- polariser(angle_phi)
- waveplate(retardance, angle_phi)

optical_matrices.py:
	contains matrices necessary for the ray tracing performed by optical elements
	(which is higher level than optical matrices)
	
detector.py:
-detector (class)
	- self.add_field(dipole):
		add electric fields from a dipole onto a detector object
	- self.integrate_pupil():
		integrate the elements on detector to calculate total energy in pupil
	- bin_intensity?():
		do we implement a binning detector? don't think it is necessary if we 
		get area scaling right, visualisation handled by triangulation (unstructured)
		
anisotropy.py:
-calculate_anisotropy(detector.Ip, detector.Is):
	caluclate anisotropy with parallel and perpendicular intensities
-theoretical_anisotropy(NA, dipole_orientation):
	use Axelrod paper theory
	
dipole_source.py:
-DipoleSource (class):
	-self.add_dipoles(dipole_orientation, count):
		manually add dipoles at specific orientation
	-self.generate_dipoles(count, method):
		generate uniform distriubtion of dipoles, at the moment random works best
	-self.classical_photoselection(excitation_orientation):
		scales intensity of dipoles by dot product of dipole moment and excitation
	-self.get_rays(NA):
		loop over dipoles in source and get uniform rays within given NA -
		calls dipole.get_rays(NA) (maybe we should change names to be less confusing)
		also sum the E fields at this stage!! saves insane amounts of time!!

dipole.py:
-Dipole (class):
	- self.__init__(dipole_orientation)
	- self.get_e_field(theta, phi, r):
		evaluate electric field a radius from dipole at (theta, phi)
	- self.get_rays(NA):
		calculate uniform distributed points on entrance pupil and call get_ray
		for each point, which calls get_e_field to find the ray's initial E-field 
		
		